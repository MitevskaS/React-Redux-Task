{"version":3,"sources":["app/containers/addPost.js","actions/postAction.js","actions/actionTypes.js","app/components/post.js","app/containers/listPosts.js","App.js","serviceWorker.js","reducers/index.js","reducers/postReducer.js","index.js","store/configureStore.js"],"names":["Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","handleSubmit","state","post","react_default","a","createElement","className","onSubmit","type","rows","onChange","placeholder","value","required","event","setState","target","preventDefault","createPost","React","Component","actionCreator","postAction","connect","posts","Post","_this$props","onClick","List","length","map","index","post_Post","key","deletePost","id","ownProps","App","listPosts","addPost","Boolean","window","location","hostname","match","combineReducers","arguments","undefined","action","concat","toConsumableArray","filter","data","store","createStore","rootReducer","ReactDOM","render","es","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d500e8d6.chunk.js","sourcesContent":["import\r\n  React\r\n  from 'react';\r\nimport {\r\n  connect\r\n} from 'react-redux';\r\nimport\r\n  * as postAction\r\n  from '../../actions/postAction';\r\nimport\r\n  '../style/App.css';\r\n\r\nclass Form extends React.Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.state = {\r\n      post: ''\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <form\r\n        className=\"flex-container\"\r\n        onSubmit={this.handleSubmit}>\r\n        <textarea\r\n          type=\"text\"\r\n          rows=\"3\"\r\n          onChange={this.handleChange}\r\n          placeholder=\"Write your post here\"\r\n          value={this.state.post}\r\n          required\r\n        >\r\n        </textarea>\r\n        <button\r\n          type=\"submit\">\r\n          SAVE\r\n        </button>\r\n      </form>\r\n    )\r\n  }\r\n\r\n  /* this function handles change in the textarea field\r\n  and it stores its value in state to be used later */\r\n  handleChange(event){\r\n    this.setState({\r\n      post: event.target.value\r\n    })\r\n  }\r\n\r\n  /*this function is called when the submit button is\r\n  clicked and it calls the createPost action to store\r\n  the new post in redux store */\r\n  handleSubmit(event){\r\n    // prevents refreshing the page\r\n    event.preventDefault();\r\n    /* new object -post- is defined with key \"post\"\r\n    and the content of the new post as value */\r\n    let post = {\r\n      post: this.state.post\r\n    }\r\n    /* call to function that dispatches the action createPost\r\n    with the new post object as argument*/\r\n    this.props.createPost(post);\r\n    // empty the text field\r\n    this.setState({\r\n      post: ''\r\n    })\r\n  }\r\n}\r\n\r\n/*receives the redux state and assigns it to props\r\nto be used in the React component*/\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    posts: state.posts\r\n  }\r\n};\r\n\r\n/*object with the action creator function - createPost - as property,\r\nwhen passed to connect() it will automatically bind the function\r\n- createPost - in a call to dispatch*/\r\nconst actionCreator = {\r\n  createPost: (post) => postAction.createPost(post),\r\n};\r\n\r\nexport default connect(mapStateToProps,actionCreator)(Form);\r\n","import\r\n  * as actionTypes\r\n  from './actionTypes';\r\n\r\n/* createPost function returns an object which\r\ndescribes the action type and contains the\r\ncontent of the post */\r\nexport const createPost = (post) => {\r\n  return {\r\n    type: actionTypes.CREATE_NEW_POST,\r\n    post: post\r\n  }\r\n};\r\n\r\n/* deletePost function returns an object which\r\ndescribes the action type and contains the id\r\nof the post that will be removed */\r\nexport const deletePost = (id) => {\r\n  return {\r\n    type: actionTypes.DELETE_POST,\r\n    id: id\r\n  }\r\n};\r\n","export const GET_ALL_POSTS = 'GET_ALL_POSTS';\r\nexport const CREATE_NEW_POST = 'CREATE_NEW_POST';\r\nexport const DELETE_POST = 'DELETE_POST';\r\n","import\r\n  React\r\n  from 'react';\r\nimport\r\n  '../style/App.css';\r\n\r\nexport default class Post extends React.Component {\r\n\r\n  render(){\r\n    const {\r\n      post,\r\n      onClick\r\n    } = this.props;\r\n    return (\r\n      <li\r\n        className=\"flex-container\">\r\n        <span>\r\n          {post.post}\r\n        </span>\r\n        <button\r\n          type=\"button\"\r\n          onClick={onClick}>\r\n          Delete\r\n        </button>\r\n      </li>\r\n    )\r\n  }\r\n}\r\n","import\r\n  React\r\n  from 'react';\r\nimport {\r\n  connect\r\n} from 'react-redux';\r\nimport\r\n  * as postAction\r\n  from '../../actions/postAction';\r\nimport\r\n  Post\r\n  from '../components/post';\r\nimport\r\n  '../style/App.css';\r\n\r\nclass List extends React.Component {\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n        <h3>\r\n          {this.props.posts.length} Posts\r\n        </h3>\r\n        {\r\n          this.props.posts.length === 0 &&\r\n          <div\r\n            className=\"message\">\r\n            <span>There are no posts</span>\r\n          </div>\r\n        }\r\n        <ul>\r\n          {\r\n            this.props.posts.map((post,index) =>\r\n              <Post\r\n                key={index}\r\n                post={post}\r\n                onClick={() => this.props.deletePost(index)}\r\n              />\r\n            )\r\n          }\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n/*receives the redux state and assigns it to props\r\nto be used in the React component*/\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    posts: state.posts\r\n  }\r\n};\r\n\r\n/*object with the action creator function - deletePost - as property,\r\nwhen passed to connect() it will automatically bind the function\r\n- deletePost - in a call to dispatch*/\r\nconst actionCreator = {\r\n  deletePost: (id) => postAction.deletePost(id),\r\n};\r\n\r\nexport default connect(mapStateToProps, actionCreator)(List);\r\n","import\n  React\n  from 'react';\nimport\n  './app/style/App.css';\nimport\n  Form\n  from './app/containers/addPost';\nimport\n  List\n  from './app/containers/listPosts';\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <div\n        className=\"container\">\n        <List/>\n        <Form/>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n  combineReducers\r\n} from 'redux';\r\nimport\r\n  posts\r\n  from './postReducer';\r\n\r\n/* combineReducers helps combining different reducing functions\r\nin a single reducing function that can be passed to createStore\r\nIn this case there is only one reducer - posts - and it is\r\nturned into an object with the reducing function as value */\r\nexport default combineReducers({\r\n    posts: posts\r\n});\r\n","import\r\n  * as actionTypes\r\n  from '../actions/actionTypes';\r\n\r\nexport default (state = [], action) => {\r\n  switch (action.type){\r\n    case actionTypes.CREATE_NEW_POST:\r\n      // returns the original state with the new post object\r\n      return [\r\n        ...state,\r\n        action.post,\r\n    ];\r\n    case actionTypes.DELETE_POST:\r\n      /* to prevent mutating the original state only filter\r\n      posts and return new array without the element with id === action.id */\r\n      return state.filter((data, id) => id !== action.id)\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import\n  React\n  from 'react';\nimport\n  ReactDOM\n  from 'react-dom';\nimport\n  './app/style/index.css';\nimport\n  App\n  from './App';\nimport\n  * as serviceWorker\n  from './serviceWorker';\nimport {\n  Provider\n} from 'react-redux';\nimport\n  configureStore\n  from './store/configureStore';\n\n// function that creates the store which is then passed as prop in Provider\nconst store = configureStore();\n\n/* The <Provider> from the react-redux library is used\nto wrap the App component and make the redux store\navailable to the context of the Application */\nReactDOM.render(\n  <Provider\n    store={store}>\n    <App />\n  </Provider>, document.getElementById('root'));\n\nserviceWorker.unregister();\n","import {\r\n  createStore\r\n} from 'redux';\r\nimport\r\n  rootReducer\r\n  from '../reducers';\r\n\r\n // create the store and pass the rootReducer to it.\r\nexport default function configureStore() {\r\n  return createStore(rootReducer);\r\n}\r\n"],"sourceRoot":""}